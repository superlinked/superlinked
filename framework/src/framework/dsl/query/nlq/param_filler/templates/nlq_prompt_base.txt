You are assisting a user in translating their natural language query into a structured superlinked query. A superlinked query is a k-nearest neighbors (k-NN) search using a query vector against a knowledge base of items, utilizing inner product similarity.

**Your Task:**
1. **Extract Key Requirements:**
   - Identify important requirements from the user's query related to different attributes: such as text, recency, categories, numbers, etc.
2. **Map Requirements to Spaces:**
   - Assign these requirements to the corresponding spaces provided below. Use the names and descriptions of the fields, spaces, and schema fields to guide your mapping.
3. **Assign Weights and Values:**
   - Set appropriate weights and values based on the user's requirements.
      - POSITIVE: 1 for positive preference
      - NEUTRAL 0 for indifference or when not explicitly stated
      - NEGATIVE -1 for negative preference
   - If the user requires an attribute, assign the corresponding weight the value 1.0 for normal preference and 3.0 for increased preference.
   - If the user expresses a negative requirement for an attribute, assign the corresponding weight the value -1.0 and -3.0 for increased negative preference.
   - If the user expresses indifference for an attribute, assign the corresponding weight the value 0.0.
   - Use default values if not explicitly stated in the user's query.

**Key Advice:**
- **Separate Textual Requirements:**
  - Distribute textual inputs to relevant fields. For example, "Comedy movies about gangsters" assigns "comedy" to the `genre` field and "gangsters" to the `description` field, each with a weight of 1.
- **Consider Recency:**
  - Reflect any time-related requirements by adjusting the recency weight. For instance, "recent movies" should have a positive recency weight, whereas "old movies" should have a negative recency weight.
- **Interpret Adjectives and Emphasis:**
  - Absolute requirements (reflected by words "only", "without", "must") require using filter clauses.
- **Handle Numerical References:**
  - Pay attention to numerical values and the mode of the `NumberSpace`. For example, "high-quality products" might correspond to a positive weight in a `rating` space.
- **Use Categorical Spaces Appropriately:**
  - Match user-specified categories to the values in categorical spaces.

**Instructions:**
- Fill in the weights and values for the parameters below based on the user's query, replacing any default `None` or `null` values.
- If a field is unrelated to the user's query, you can retain its default value.

**Example Application 1:**
_User Query:_ "I'm looking for a blue dog."
- **Extracted Requirements:**
  - `"blue"` (color)
  - `"dog"` (animal)
- **Mapped Spaces:**
  - Assign `"blue"` to the color field.
  - Assign `"dog"` to the animal field.
- **Weights:**
  - Both attributes have equal, +1 weights.

**Example Application 2:**
_User Query:_ "Find recent articles about renewable energy excluding solar power."
- **Extracted Requirements:**
  - `"renewable energy"` (topic)
  - `"solar power"` (negative topic)
- **Mapped Spaces:**
  - Assign `"renewable energy"` to the `topic1` field.
  - Assign `"solar power"` to the `topic2` field with a negative weight.
  - Adjust the `recency` weight to reflect the desire for recent articles.
- **Weights:**
  - `topic` weight: +1 for "renewable energy", -1 for "solar power"
  - `recency` weight: +1

**Example Application 3:**
_User Query:_ "I'm looking for high-rated fantasy novels without dragons."
- **Extracted Requirements:**
  - `"fantasy"` (genre)
  - `"without dragons"` (negative content)
- **Mapped Spaces:**
  - Assign `"fantasy"` to the `genre` field.
  - Assign `"dragons"` to the `content` field with a negative weight.
  - Assign a positive weight to the `rating` field for high ratings.
- **Weights:**
  - `genre` weight: +1
  - `content` weight: -1 for "dragons"
  - `rating` weight: +1

**Example Application 4:**
_User Query:_ "Show me affordable smartphones released in the last year with at least 64GB storage."
- **Extracted Requirements:**
  - `"affordable"` (price)
  - `"released in the last year"` (recency)
  - `"at least 64GB storage"` (storage capacity)
- **Mapped Spaces:**
  - Set the `price` field 0 to reflect affordability.
  - Adjust the `recency` weight positively for recent models.
  - Assign `64` to the `storage_gb_greater_equal` field.
- **Weights:**
  - `price` weight: +1 for lower prices
  - `recency` weight: +1
  - `storage` weight: +1

**Example Application 5:**
_User Query:_ "Find me classical music compositions longer than 20 minutes without any vocals."
- **Extracted Requirements:**
  - `"classical music"` (genre)
  - `"longer than 20 minutes"` (duration)
  - `"without any vocals"` (negative attribute)
- **Mapped Spaces:**
  - Assign `"classical"` to the `genre` field.
  - Set `20` minutes to the `duration_greater` field.
  - Assign `"vocals"` to the `features` field with a negative weight.
- **Weights:**
  - `genre` weight: +1
  - `duration` weight: +1
  - `features` weight: -1 for "vocals"

**Example Application 6:**
_User Query:_ "I'm interested in eco-friendly cleaning products under $20."
- **Extracted Requirements:**
  - `"eco-friendly"` (attribute)
  - `"cleaning products"` (category)
  - `"under $20"` (price)
- **Mapped Spaces:**
  - Assign `"eco-friendly"` to the `attributes` field.
  - Assign `"cleaning products"` to the `category` field.
  - Set `20` to the `price_usd_less_than` field.
- **Weights:**
  - `attributes` weight: +1
  - `category` weight: +1
  - `price` weight: +1

**Example Application 7:**
_User Query:_ "I really want to watch comedy movies, specifically from the 90s, but I don't like slapstick humor."
- **Extracted Requirements:**
  - `"really want comedy"` (strong genre preference)
  - `"from the 90s"` (time period)
  - `"don't like slapstick humor"` (negative sub-genre)
- **Mapped Spaces:**
  - Assign `"comedy"` to the `genre` field.
  - Assign `1994` to the `release_date` field.
  - Assign `"slapstick"` to the `sub_genre` field with a negative weight.
- **Weights:**
  - `genre` weight: +3
  - `release_date` weight: +1
  - `sub_genre` weight: -1 for "slapstick"
{% if space_annotation_map %}

**Fields grouped by space description and parameters:**
{% for space_annotation, clause_annotations in space_annotation_map.items() %}
- **Space description:** {{ space_annotation }}
{% for annotation in clause_annotations %}
{{ annotation }}
{% endfor %}
{% endfor %}
{% endif %}
{% if space_affecting_annotations %}

**Fields affecting all spaces:**
{% for nlq_annotation in space_affecting_annotations %}
{{ nlq_annotation.annotation }}
{% endfor %}
{% endif %}
{% if exact_value_required_annotations %}

**Fields requiring Exact Values:**
- **Logic**: Multiple conditions combined with `AND`.
- **Usage**: Filters results to include only exact matches.
{% for nlq_annotation in exact_value_required_annotations %}
{{ nlq_annotation.annotation }}
{% endfor %}
{% endif %}
{% if system_prompt %}

{{ system_prompt }}
{% endif %}
