name: Claude Code Review

on:
  push:
    branches: [main]
    # Only run on changes to the framework/reference directory
    paths:
      - "framework/reference/**"

jobs:
  claude-review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code Review
        id: claude-review
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.CLAUDE_CODE_API_KEY }}
          prompt: |
            Please review this commit and update the `docs/reference/` subdirectory

            For changes in `framework/reference/`, update the corresponding file with same filename in `docs/reference/` subdirectory. Based on :
            - If content is modified, use the modified content as a reference to update the formatted-reference document.


            - For new .md files, create a new .mdx file with same name in `docs/reference/` following a similar heirarchy as in `framework/reference/`. Then, format it properly using mintlify components. Then, add it to sub-directory's `overview.mdx` file in the appropriate place, and if needed, also in `docs/reference/components.mdx`. Also, add the new file to the `docs/docs.json` file.
            For eg. if a new file is created in `framework/reference/common/dag/<new_file.md>`, create a new file `docs/reference/common/dag/<new_file.mdx>`

            - For removed files, remove them from `docs/reference/`, and from that sub-directory's `overview.mdx` file, and also in `docs/reference/components.mdx` if exists. Also, remove the file from the `docs/docs.json` file.


            Do not
            - create content on your own. stick to what's in the documentation.

            Mintlify reference-

            # How to format using mintlify components

            ## Project context
            - Format: MDX files with YAML frontmatter
            - Structure: 
              - `reference/` directory is automated documentation for superlinked's python framework created using pdoc3
              - `formatted-reference/` directory is the properly formatted version of the reference using mintlify components. 
            - Components: Mintlify components (## Mintlify component reference)


            ## Frontmatter requirements for pages
            - title: Clear, descriptive page title
            - description: Concise summary for SEO/navigation

            ## Writing standards
            - Second-person voice ("you")
            - Match style and formatting of existing pages
            - Language tags on all code blocks
            - Relative paths for internal links

            ## Git workflow
            - NEVER use --no-verify when committing
            - Commit frequently throughout development
            - NEVER skip or disable pre-commit hooks

            ## Do not
            - Skip frontmatter on any MDX file
            - Use absolute URLs for internal links
            - Make assumptions


            ## Mintlify component reference

            ### docs.json

            - Refer to the [docs.json schema](https://mintlify.com/docs.json) when building the docs.json file and site navigation

            ### Callout components

            #### Note - Additional helpful information

            <Note>
            Supplementary information that supports the main content without interrupting flow
            </Note>

            #### Tip - Best practices and pro tips

            <Tip>
            Expert advice, shortcuts, or best practices that enhance user success
            </Tip>

            #### Warning - Important cautions

            <Warning>
            Critical information about potential issues, breaking changes, or destructive actions
            </Warning>

            #### Info - Neutral contextual information

            <Info>
            Background information, context, or neutral announcements
            </Info>

            #### Check - Success confirmations

            <Check>
            Positive confirmations, successful completions, or achievement indicators
            </Check>

            ### Code components

            #### Single code block

            Example of a single code block:

            ```javascript config.js
            const apiConfig = {
              baseURL: 'https://api.example.com',
              timeout: 5000,
              headers: {
                'Authorization': `Bearer ${process.env.API_TOKEN}`
              }
            };
            ```

            #### Code group with multiple languages

            Example of a code group:

            <CodeGroup>
            ```javascript Node.js
            const response = await fetch('/api/endpoint', {
              headers: { Authorization: `Bearer ${apiKey}` }
            });
            ```

            ```python Python
            import requests
            response = requests.get('/api/endpoint', 
              headers={'Authorization': f'Bearer {api_key}'})
            ```

            ```curl cURL
            curl -X GET '/api/endpoint' \
              -H 'Authorization: Bearer YOUR_API_KEY'
            ```
            </CodeGroup>

            #### Request/response examples

            Example of request/response documentation:

            <RequestExample>
            ```bash cURL
            curl -X POST 'https://api.example.com/users' \
              -H 'Content-Type: application/json' \
              -d '{"name": "John Doe", "email": "john@example.com"}'
            ```
            </RequestExample>

            <ResponseExample>
            ```json Success
            {
              "id": "user_123",
              "name": "John Doe", 
              "email": "john@example.com",
              "created_at": "2024-01-15T10:30:00Z"
            }
            ```
            </ResponseExample>

            ### Structural components

            #### Steps for procedures

            Example of step-by-step instructions:

            <Steps>
            <Step title="Install dependencies">
              Run `npm install` to install required packages.
              
              <Check>
              Verify installation by running `npm list`.
              </Check>
            </Step>

            <Step title="Configure environment">
              Create a `.env` file with your API credentials.
              
              ```bash
              API_KEY=your_api_key_here
              ```
              
              <Warning>
              Never commit API keys to version control.
              </Warning>
            </Step>
            </Steps>

            #### Tabs for alternative content

            Example of tabbed content:

            <Tabs>
            <Tab title="macOS">
              ```bash
              brew install node
              npm install -g package-name
              ```
            </Tab>

            <Tab title="Windows">
              ```powershell
              choco install nodejs
              npm install -g package-name
              ```
            </Tab>

            <Tab title="Linux">
              ```bash
              sudo apt install nodejs npm
              npm install -g package-name
              ```
            </Tab>
            </Tabs>

            #### Accordions for collapsible content

            Example of accordion groups:

            <AccordionGroup>
            <Accordion title="Troubleshooting connection issues">
              - **Firewall blocking**: Ensure ports 80 and 443 are open
              - **Proxy configuration**: Set HTTP_PROXY environment variable
              - **DNS resolution**: Try using 8.8.8.8 as DNS server
            </Accordion>

            <Accordion title="Advanced configuration">
              ```javascript
              const config = {
                performance: { cache: true, timeout: 30000 },
                security: { encryption: 'AES-256' }
              };
              ```
            </Accordion>
            </AccordionGroup>

            ### Cards and columns for emphasizing information

            Example of cards and card groups:

            <Card title="Getting started guide" icon="rocket" href="/quickstart">
            Complete walkthrough from installation to your first API call in under 10 minutes.
            </Card>

            <CardGroup cols={2}>
            <Card title="Authentication" icon="key" href="/auth">
              Learn how to authenticate requests using API keys or JWT tokens.
            </Card>

            <Card title="Rate limiting" icon="clock" href="/rate-limits">
              Understand rate limits and best practices for high-volume usage.
            </Card>
            </CardGroup>

            ### API documentation components

            #### Parameter fields

            Example of parameter documentation:

            <ParamField path="user_id" type="string" required>
            Unique identifier for the user. Must be a valid UUID v4 format.
            </ParamField>

            <ParamField body="email" type="string" required>
            User's email address. Must be valid and unique within the system.
            </ParamField>

            <ParamField query="limit" type="integer" default="10">
            Maximum number of results to return. Range: 1-100.
            </ParamField>

            <ParamField header="Authorization" type="string" required>
            Bearer token for API authentication. Format: `Bearer YOUR_API_KEY`
            </ParamField>

            #### Response fields

            Example of response field documentation:

            <ResponseField name="user_id" type="string" required>
            Unique identifier assigned to the newly created user.
            </ResponseField>

            <ResponseField name="created_at" type="timestamp">
            ISO 8601 formatted timestamp of when the user was created.
            </ResponseField>

            <ResponseField name="permissions" type="array">
            List of permission strings assigned to this user.
            </ResponseField>

            #### Expandable nested fields

            Example of nested field documentation:

            <ResponseField name="user" type="object">
            Complete user object with all associated data.

            <Expandable title="User properties">
              <ResponseField name="profile" type="object">
              User profile information including personal details.
              
              <Expandable title="Profile details">
                <ResponseField name="first_name" type="string">
                User's first name as entered during registration.
                </ResponseField>
                
                <ResponseField name="avatar_url" type="string | null">
                URL to user's profile picture. Returns null if no avatar is set.
                </ResponseField>
              </Expandable>
              </ResponseField>
            </Expandable>
            </ResponseField>

            ### Media and advanced components

            #### Frames for images

            Wrap all images in frames:

            <Frame>
            <img src="/images/dashboard.png" alt="Main dashboard showing analytics overview" />
            </Frame>

            <Frame caption="The analytics dashboard provides real-time insights">
            <img src="/images/analytics.png" alt="Analytics dashboard with charts" />
            </Frame>

            #### Videos

            Use the HTML video element for self-hosted video content:

            <video
              controls
              className="w-full aspect-video rounded-xl"
              src="link-to-your-video.com"
            ></video>

            Embed YouTube videos using iframe elements:

            <iframe
              className="w-full aspect-video rounded-xl"
              src="https://www.youtube.com/embed/4KzFe50RQkQ"
              title="YouTube video player"
              frameBorder="0"
              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
              allowFullScreen
            ></iframe>

            #### Tooltips

            Example of tooltip usage:

            <Tooltip tip="Application Programming Interface - protocols for building software">
            API
            </Tooltip>

            #### Updates

            Use updates for changelogs:

            <Update label="Version 2.1.0" description="Released March 15, 2024">
            ## New features
            - Added bulk user import functionality
            - Improved error messages with actionable suggestions

            ## Bug fixes
            - Fixed pagination issue with large datasets
            - Resolved authentication timeout problems
            </Update>

            ## Required page structure

            Every documentation page must begin with YAML frontmatter:

            ```yaml
            ---
            title: "Clear, specific, keyword-rich title"
            description: "Concise description explaining page purpose and value"
            ---
            ```

            ## Component selection logic

            - Use **Steps** for procedures and sequential instructions
            - Use **Tabs** for platform-specific content or alternative approaches
            - Use **CodeGroup** when showing the same concept in multiple programming languages
            - Use **Accordions** for progressive disclosure of information
            - Use **RequestExample/ResponseExample** specifically for API endpoint documentation
            - Use **ParamField** for API parameters, **ResponseField** for API responses
            - Use **Expandable** for nested object properties or hierarchical information

          claude_args: '--allowed-tools "Bash(gh issue view:*),Bash(gh search:*),Bash(gh issue list:*),Bash(gh pr comment:*),Bash(gh pr diff:*),Bash(gh pr view:*),Bash(gh pr list:*)"'
          